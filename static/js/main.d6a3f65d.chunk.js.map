{"version":3,"sources":["components/Post.js","components/AppBar.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","react_default","a","createElement","Badge_default","badgeContent","concat","index","color","Card_default","style","maxWidth","maxHeight","overflow","data","preview","index_es","image","images","source","url","width","height","marginLeft","marginRight","CardContent_default","Typography_default","gutterBottom","variant","component","title","react_markdown_default","selftext","CardActions_default","Button_default","size","href","permalink","withStyles","theme","root","grow","flexGrow","search","Object","defineProperty","position","borderRadius","shape","backgroundColor","fade","palette","common","white","&:hover","breakpoints","up","spacing","unit","searchIcon","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","classes","className","AppBar_default","Toolbar_default","Search_default","Input_default","placeholder","disableUnderline","input","onKeyPress","e","key","onSubmit","target","value","PAGE_SIZE","createMuiTheme","primary","main","App","state","subreddit","posts","before","after","loading","removeStickied","filter","post","stickied","fetchPage","_this","setState","fetch","then","response","json","children","onKeyDown","event","_this$state","relativeIndex","length","onSearch","document","addEventListener","this","removeEventListener","_this$state2","currentPost","core_styles","components_AppBar","Grid_default","container","justify","CircularProgress_default","components_Post","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6a3f65d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Badge from \"@material-ui/core/Badge\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CardMedia } from \"@material-ui/core\";\nimport Markdown from \"react-markdown\";\n\nconst Post = props => {\n  return (\n    <Badge badgeContent={`#${props.index + 1}`} color=\"primary\">\n      <Card style={{ maxWidth: 800, maxHeight: 800, overflow: \"auto\" }}>\n        {!!props.data.preview && (\n          <CardMedia\n            image={props.data.preview.images[0].source.url}\n            style={{\n              width:\n                (props.data.preview.images[0].source.width * 400) /\n                props.data.preview.images[0].source.height,\n              height: 400,\n              marginLeft: \"auto\",\n              marginRight: \"auto\"\n            }}\n          />\n        )}\n        <CardContent style={{ maxHeight: 400, overflow: \"auto\" }}>\n          <Typography gutterBottom variant=\"headline\" component=\"h2\">\n            {props.data.title}\n          </Typography>\n          <Typography component=\"p\">\n            {\" \"}\n            <Markdown source={props.data.selftext} />\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button size=\"small\" color=\"primary\" href={props.data.url}>\n            Source\n          </Button>\n          <Button\n            size=\"small\"\n            color=\"primary\"\n            href={`https://www.reddit.com${props.data.permalink}`}\n          >\n            Comments\n          </Button>\n        </CardActions>\n      </Card>\n    </Badge>\n  );\n};\n\nPost.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nexport default Post;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Input from \"@material-ui/core/Input\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst styles = theme => ({\n  root: {\n    width: \"100%\"\n  },\n  grow: {\n    flexGrow: 1\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing.unit,\n      width: \"auto\"\n    }\n  },\n  searchIcon: {\n    width: theme.spacing.unit * 9,\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  inputRoot: {\n    color: \"inherit\",\n    width: \"100%\"\n  },\n  inputInput: {\n    paddingTop: theme.spacing.unit,\n    paddingRight: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n    paddingLeft: theme.spacing.unit * 10,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      width: 240,\n      \"&:focus\": {\n        width: 400\n      }\n    }\n  }\n});\n\nconst SearchAppBar = props => {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"absolute\" color=\"primary\">\n        <Toolbar>\n          <div className={classes.grow} />\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <Input\n              placeholder=\"Enter a subreddit...\"\n              disableUnderline\n              classes={{ root: classes.inputRoot, input: classes.inputInput }}\n              onKeyPress={e => {\n                if (e.key === \"Enter\") props.onSubmit(e.target.value);\n              }}\n            />\n          </div>\n          <div className={classes.grow} />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nSearchAppBar.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(SearchAppBar);\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport Post from \"./components/Post\";\nimport AppBar from \"./components/AppBar\";\n\nconst PAGE_SIZE = 50;\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#ff4500\"\n    }\n  }\n});\n\nclass App extends React.Component {\n  state = {\n    subreddit: \"all\",\n    posts: [],\n    before: null,\n    after: null,\n    index: 0,\n    loading: true\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    this.fetchPage(null, null);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n  }\n\n  removeStickied = posts => posts.filter(post => !post.data.stickied);\n\n  fetchPage = (before, after) => {\n    const { subreddit } = this.state;\n    this.setState({ loading: true });\n    fetch(\n      `https://www.reddit.com/r/${subreddit}.json?limit=${PAGE_SIZE}&count=${PAGE_SIZE}&before=${before}&after=${after}`\n    )\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          posts: this.removeStickied(data.data.children),\n          before: data.data.before,\n          after: data.data.after,\n          loading: false\n        })\n      );\n  };\n\n  onKeyDown = event => {\n    const { posts, index, loading, before, after } = this.state;\n\n    if (loading || (event.key === \"ArrowLeft\" && index === 0)) return;\n\n    const relativeIndex = index % PAGE_SIZE;\n    if (event.key === \"ArrowRight\") {\n      this.setState({ index: index + 1 });\n      if (relativeIndex === posts.length - 1) this.fetchPage(null, after);\n    } else if (event.key === \"ArrowLeft\") {\n      this.setState({ index: index - 1 });\n      if (relativeIndex === 0) this.fetchPage(before, null);\n    }\n  };\n\n  onSearch = subreddit =>\n    this.setState({ subreddit, index: 0 }, () => this.fetchPage(null, null));\n\n  render() {\n    const { posts, index, loading } = this.state;\n    const currentPost = posts[index % PAGE_SIZE];\n\n    return (\n      <MuiThemeProvider theme={theme}>\n        <AppBar onSubmit={this.onSearch} />\n        <Grid\n          style={{ height: \"100vh\" }}\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          {loading ? (\n            <CircularProgress />\n          ) : (\n            <Post\n              key={currentPost.data.id}\n              data={currentPost.data}\n              index={index}\n            />\n          )}\n        </Grid>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}