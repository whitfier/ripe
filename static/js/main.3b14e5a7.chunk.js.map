{"version":3,"sources":["components/Post.js","components/AppBar.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","react_default","a","createElement","Card_default","style","maxWidth","data","preview","index_es","image","images","source","url","width","height","marginLeft","marginRight","CardContent_default","maxHeight","overflow","Typography_default","gutterBottom","variant","component","title","selftext","CardActions_default","Button_default","size","color","href","concat","permalink","withStyles","theme","root","grow","flexGrow","search","Object","defineProperty","position","borderRadius","shape","backgroundColor","fade","palette","common","white","&:hover","breakpoints","up","spacing","unit","searchIcon","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","classes","className","AppBar_default","Toolbar_default","Search_default","Input_default","placeholder","disableUnderline","input","onKeyPress","e","key","onSubmit","target","value","PAGE_SIZE","createMuiTheme","primary","main","App","state","subreddit","posts","before","after","postIndex","loading","removeStickied","filter","post","stickied","fetchFirstPage","_this","setState","fetch","then","response","json","children","fetchNextPage","_this$state","fetchPrevPage","_this$state2","onKeyDown","event","_this$state3","length","onSearch","document","addEventListener","this","removeEventListener","_this$state4","LinearProgress_default","currentPost","Fragment","components_AppBar","Grid_default","container","justify","CircularProgress_default","components_Post","id","React","Component","AppWithTheme","core_styles","App_App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b14e5a7.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CardMedia } from \"@material-ui/core\";\n\nconst Post = props => {\n  return (\n    <Card style={{ maxWidth: 800 }}>\n      {!!props.data.preview && (\n        <CardMedia\n          image={props.data.preview.images[0].source.url}\n          style={{\n            width:\n              (props.data.preview.images[0].source.width * 400) /\n              props.data.preview.images[0].source.height,\n            height: 400,\n            marginLeft: \"auto\",\n            marginRight: \"auto\"\n          }}\n        />\n      )}\n      <CardContent style={{ maxHeight: 400, overflow: \"scroll\" }}>\n        <Typography gutterBottom variant=\"headline\" component=\"h2\">\n          {props.data.title}\n        </Typography>\n        <Typography component=\"p\">{props.data.selftext}</Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\" href={props.data.url}>\n          Source\n        </Button>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          href={`https://www.reddit.com${props.data.permalink}`}\n        >\n          Comments\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nPost.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nexport default Post;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Input from \"@material-ui/core/Input\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst styles = theme => ({\n  root: {\n    width: \"100%\"\n  },\n  grow: {\n    flexGrow: 1\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing.unit,\n      width: \"auto\"\n    }\n  },\n  searchIcon: {\n    width: theme.spacing.unit * 9,\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  inputRoot: {\n    color: \"inherit\",\n    width: \"100%\"\n  },\n  inputInput: {\n    paddingTop: theme.spacing.unit,\n    paddingRight: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n    paddingLeft: theme.spacing.unit * 10,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      width: 240,\n      \"&:focus\": {\n        width: 400\n      }\n    }\n  }\n});\n\nconst SearchAppBar = props => {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"absolute\" color=\"primary\">\n        <Toolbar>\n          <div className={classes.grow} />\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <Input\n              placeholder=\"Enter a subreddit...\"\n              disableUnderline\n              classes={{ root: classes.inputRoot, input: classes.inputInput }}\n              onKeyPress={e => {\n                if (e.key === \"Enter\") props.onSubmit(e.target.value);\n              }}\n            />\n          </div>\n          <div className={classes.grow} />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nSearchAppBar.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(SearchAppBar);\n","import React from \"react\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport Post from \"./components/Post\";\nimport AppBar from \"./components/AppBar\";\n\nconst PAGE_SIZE = 50;\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#ff4500\"\n    }\n  }\n});\n\nclass App extends React.Component {\n  state = {\n    subreddit: \"all\",\n    posts: [],\n    before: null,\n    after: null,\n    postIndex: 0,\n    loading: true\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    this.fetchFirstPage();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n  }\n\n  removeStickied = posts => posts.filter(post => !post.data.stickied);\n\n  fetchFirstPage = () => {\n    this.setState({ loading: true });\n    fetch(\n      `https://www.reddit.com/r/${this.state.subreddit}.json?limit=${PAGE_SIZE}`\n    )\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          posts: this.removeStickied(data.data.children),\n          before: data.data.before,\n          after: data.data.after,\n          postIndex: 0,\n          loading: false\n        })\n      );\n  };\n\n  fetchNextPage = () => {\n    const { subreddit, after } = this.state;\n    this.setState({ loading: true });\n    fetch(\n      `https://www.reddit.com/r/${subreddit}.json?limit=${PAGE_SIZE}&count=${PAGE_SIZE}&after=${after}`\n    )\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          posts: this.removeStickied(data.data.children),\n          before: data.data.before,\n          after: data.data.after,\n          postIndex: 0,\n          loading: false\n        })\n      );\n  };\n\n  fetchPrevPage = () => {\n    const { subreddit, before } = this.state;\n    if (before === null) return;\n    this.setState({ loading: true });\n    fetch(\n      `https://www.reddit.com/r/${subreddit}.json?limit=${PAGE_SIZE}&count=${PAGE_SIZE}&before=${before}`\n    )\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          posts: this.removeStickied(data.data.children),\n          before: data.data.before,\n          after: data.data.after,\n          postIndex: PAGE_SIZE - 1,\n          loading: false\n        })\n      );\n  };\n\n  onKeyDown = event => {\n    const { posts, postIndex, loading } = this.state;\n    if (loading) return;\n    if (event.key === \"ArrowRight\") {\n      if (postIndex === posts.length - 1) this.fetchNextPage();\n      else this.setState({ postIndex: postIndex + 1 });\n    } else if (event.key === \"ArrowLeft\") {\n      if (postIndex === 0) this.fetchPrevPage();\n      else this.setState({ postIndex: postIndex - 1 });\n    }\n  };\n\n  onSearch = subreddit =>\n    this.setState({ subreddit }, () => this.fetchFirstPage());\n\n  render() {\n    const { posts, postIndex, loading } = this.state;\n    if (posts.length === 0) return <LinearProgress />;\n    const currentPost = posts[postIndex];\n\n    return (\n      <>\n        <AppBar onSubmit={this.onSearch} />\n        <Grid\n          style={{ height: \"100vh\" }}\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          {loading ? (\n            <CircularProgress />\n          ) : (\n            <Post key={currentPost.data.id} data={currentPost.data} />\n          )}\n        </Grid>\n      </>\n    );\n  }\n}\n\nconst AppWithTheme = () => (\n  <MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>\n);\n\nexport default AppWithTheme;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}